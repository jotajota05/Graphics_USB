#include <GL/gl.h>
#include <GL/glut.h>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <utility>
#include <string.h>
#include <ctime>
#include <cstdlib>
#include <math.h>

#include "sphere.h"
#include "vector.h"

#define PI 3.14159265

int timer = 100.0;


using namespace std;

Sphere::Sphere() {
  x = 18;
  z = 10;
  radius = 0.6;
  speed = 1.0;
  dir.first = x;
  dir.second = z;
  r = 0;
  l = 1;
  u = 1;
  d = 0;
  hit_bar = 0;
}

void Sphere::draw() {
  glPushMatrix();
  glColor3f(0.0,0.0,1.0);
//   cout << "X = " << x << '\n';
//   cout << "Z = " << z << '\n';
  glTranslatef(x, 0.5, z);
  glutSolidSphere(radius,50.0,50.0);
  glPopMatrix();

  double dist = sin(45.0*PI/180);
  dist *= radius;

  glPushMatrix();

  glBegin(GL_LINES);

  if (u == 1 && l == 1) {
    glVertex3f(x + dist, 0.5, z - dist);
    glVertex3f(x + dist + 3.0, 0.5, z - dist + 3.0);

    glVertex3f(x + dist, 0.5, z + dist);
    glVertex3f(x + dist + 3.0, 0.5, z + dist + 3.0);

    glVertex3f(x - dist, 0.5, z + dist);
    glVertex3f(x - dist + 3.0, 0.5, z + dist + 3.0);
  }

  if (u == 1 && r == 1) {
    glVertex3f(x + dist, 0.5, z + dist);
    glVertex3f(x + dist - 3.0, 0.5, z + dist + 3.0);

    glVertex3f(x - dist, 0.5, z + dist);
    glVertex3f(x - dist - 3.0, 0.5, z + dist + 3.0);

    glVertex3f(x - dist, 0.5, z - dist);
    glVertex3f(x - dist - 3.0, 0.5, z - dist + 3.0);
  }

  if (d == 1 && l == 1) {
    glVertex3f(x + dist, 0.5, z + dist);
    glVertex3f(x + dist + 3.0, 0.5, z + dist - 3.0);

    glVertex3f(x + dist, 0.5, z - dist);
    glVertex3f(x + dist + 3.0, 0.5, z - dist - 3.0);

    glVertex3f(x - dist, 0.5, z - dist);
    glVertex3f(x - dist + 3.0, 0.5, z - dist - 3.0);
  }

  if (d == 1 && r == 1) {
    glVertex3f(x + dist, 0.5, z - dist);
    glVertex3f(x + dist - 3.0, 0.5, z - dist - 3.0);

    glVertex3f(x - dist, 0.5, z - dist);
    glVertex3f(x - dist - 3.0, 0.5, z - dist - 3.0);

    glVertex3f(x - dist, 0.5, z + dist);
    glVertex3f(x - dist - 3.0, 0.5, z + dist - 3.0);
  }
      
  glEnd();

  glPopMatrix();
  
//   glBegin(GL_LINES);
//   glVertex3f(x, 0.5, z);
//   if (u == 1 && l == 1)
//     glVertex3f(x + 3.0, 0.5, z + 3.0);
//   else if (u == 1 && r == 1)
//     glVertex3f(x - 3.0, 0.5, z + 3.0);
//   else if (d == 1 && l == 1)
//     glVertex3f(x + 3.0, 0.5, z - 3.0);
//   else if (d == 1 && r == 1)
//     glVertex3f(x - 3.0, 0.5, z - 3.0);  

//   glVertex3f(x + 0.6, 0.5, z);
//   if (u == 1 && l == 1)
//     glVertex3f(x + 3.6, 0.5, z + 3.0);
//   else if (u == 1 && r == 1)
//     glVertex3f(x - 2.4, 0.5, z + 3.0);
//   else if (d == 1 && l == 1)
//     glVertex3f(x + 3.6, 0.5, z - 3.0);
//   else if (d == 1 && r == 1)
//     glVertex3f(x - 2.4, 0.5, z - 3.0);

//   glVertex3f(x - 0.6, 0.5, z);
//     if (u == 1 && l == 1)
//     glVertex3f(x + 2.4, 0.5, z + 3.0);
//   else if (u == 1 && r == 1)
//     glVertex3f(x - 3.6, 0.5, z + 3.0);
//   else if (d == 1 && l == 1)
//     glVertex3f(x + 2.4, 0.5, z - 3.0);
//   else if (d == 1 && r == 1)
//     glVertex3f(x - 3.6, 0.5, z - 3.0);
  
//   glEnd();
}

void Sphere::move_to() {
  pair < float,float > dir2;
  int div;

  timer -= 0.02;
  
  if (timer <= speed) {
    timer = 100.0;
    if (x > 1 && x < 35 && z > 1 && z < 60 && hit_bar == 0) {
      if (u == 1 && l == 1) {
	x = floor((x + 0.5)*10)/10;
	z = floor((z + 0.5)*10)/10;
	dir.first = x;
	dir.second = z;
      }
      else if (d == 1 && l == 1) {
	x = floor((x + 0.5)*10)/10;
	z = floor((z - 0.5)*10)/10;
	dir.first = x;
	dir.second = z;
      } 
      else if (u == 1 && r == 1) {
	x = floor((x - 0.5)*10)/10;
	z = floor((z + 0.5)*10)/10;
	dir.first = x;
	dir.second = z;
      } 
      else if (d == 1 && r == 1) {
	x = floor((x - 0.5)*10)/10;
	z = floor((z - 0.5)*10)/10;
	dir.first = x;
	dir.second = z;
      }
    } else {
      dir2.first = normalize(dir).first;
      dir2.second = normalize(dir).second;
      float num = (rand()/(RAND_MAX*0.5));
      if (x-radius <= 1) { 
	l = 1;
	r = 0;
	x = floor((x + (dir2.first+0.1)*num)*10) / 10;
      } 
      else if (x+radius >= 35) { 
	r = 1;
	l = 0;
	x = floor((x - (dir2.first+0.1)*num)*10) / 10;
      }
      else if (z+radius >= 60) { 
	d = 1;
	u = 0;
	z = floor((z - (dir2.second+0.1)*num)*10) / 10;
      } else if (z-radius <= 1) {
	x = 18;
	z = 10;
	speed = 1.0;
	dir.first = x;
	dir.second = z;
	r = 0;
	l = 1;
	u = 1;
	d = 0;
	hit_bar = 0;      
      }
      else if (hit_bar == 1) { 
	u = 1;
	d = 0;
	z = floor((z + (dir2.second+0.1)*num)*10) / 10;
	hit_bar = 0;
      }
      else if (hit_bar == 2) { 
	u = 0;
	d = 1;
	r = 0;
	l = 1;
	z = floor((z - (dir2.second+0.1)*num)*10) / 10;
	hit_bar = 0;
      }
      else if (hit_bar == 3) { 
	u = 0;
	d = 1;
	r = 1;
	l = 0;
	z = floor((z - (dir2.second+0.1)*num)*10) / 10;
	hit_bar = 0;
      }
    }
  }
}

bool Sphere::hit_brick(Brick* bricky) {
  pair < float,float > dir2;
  dir2.first = normalize(dir).first;
  dir2.second = normalize(dir).second;
  float num = (rand()/(RAND_MAX*0.5));
  double dist = sin(45.0*PI/180);
  dist *= radius;

  if (x+radius <= bricky->x+1 &&
      x+radius >= bricky->x+0.9) { 
    l = 1;
    r = 0;
    x = floor((x + (dir2.first+0.1)*num)*10) / 10;
    return 1;
  }
  else if (x+radius >= bricky->x-1 &&
	   x+radius <= bricky->x-0.9) { 
    r = 1;
    l = 0;
    x = floor((x - (dir2.first+0.1)*num)*10) / 10;
    return 1;
  }
  else if (z+radius <= bricky->z+0.5 &&
	  z+radius >= bricky->z+0.4) { 
    u = 1;
    d = 0;
    z = floor((z + (dir2.first+0.1)*num)*10) / 10;
    return 1;
  }
  else if (z+radius >= bricky->z-0.5 &&
	   z+radius <= bricky->z-0.4) { 
    d = 1;
    u = 0;
    z = floor((z - (dir2.first+0.1)*num)*10) / 10;
    return 1;
  } 
  else if (x+dist >= bricky->x-1 &&
	   x+dist <= bricky->x-0.9 &&
	   z+dist >= bricky->z-0.5 &&
	   z+dist <= bricky->z-0.4) {
    r = d = 1;
    l = u = 0;
    x = floor((x - (dir2.second+0.1)*num)*10) / 10;
    z = floor((z - (dir2.second+0.1)*num)*10) / 10;
    return 1;
  }
  else if (x-dist <= bricky->x+1 &&
	   x-dist >= bricky->x+0.9 &&
	   z-dist <= bricky->z+0.5 &&
	   z-dist >= bricky->z+0.4) {
    r = d = 0;
    l = u = 1;
    x = floor((x + (dir2.second+0.1)*num)*10) / 10;
    z = floor((z + (dir2.second+0.1)*num)*10) / 10;
    return 1;
  }
  else if (x-dist <= bricky->x+1 &&
	   x-dist >= bricky->x+0.9 &&
	   z+dist >= bricky->z-0.5 &&
	   z+dist <= bricky->z-0.4) {
    l = d = 1;
    r = u = 0;
    x = floor((x + (dir2.second+0.1)*num)*10) / 10;
    z = floor((z - (dir2.second+0.1)*num)*10) / 10;
    return 1;
  }
  else if (x+dist <= bricky->x-1 &&
	   x+dist >= bricky->x-0.9 &&
	   z-dist >= bricky->z+0.5 &&
	   z-dist <= bricky->z+0.4) {
    l = d = 0;
    r = u = 1;
    x = floor((x - (dir2.second+0.1)*num)*10) / 10;
    z = floor((z + (dir2.second+0.1)*num)*10) / 10;
    return 1;
  }
  return 0;
}
